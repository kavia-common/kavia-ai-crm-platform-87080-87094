{"is_source_file": true, "format": "Python", "description": "This file defines an AIService class with methods for scoring leads, estimating win probabilities, and forecasting in a CRM context. It utilizes SQLAlchemy ORM models for database interactions, and provides core business logic related to AI-driven insights in the CRM platform.", "external_files": ["src/db/models", "src.db.session", "src.schemas.contacts", "src.services.contacts"], "external_methods": ["db.get", "db.execute", "contact_service.list", "contact_service.by_email", "contact_service.create", "contact_service.get", "contact_service.update", "contact_service.delete"], "published": ["ai_service"], "classes": [{"name": "AIService", "description": "A heuristic-based AI service providing lead scoring, win probability estimation, and sales forecast functionalities."}], "methods": [{"name": "float score_lead(self, db: Session, contact_id: int)", "description": "Calculates a lead score between 0 and 100 based on contact attributes and related deals.", "scope": "AIService", "scopeKind": "class"}, {"name": "float win_probability(self, db: Session, deal_id: int)", "description": "Estimates the probability of winning a deal based on stage, amount, and close date.", "scope": "AIService", "scopeKind": "class"}, {"name": "Dict[str,Any] forecast(self, db: Session, pipeline_id: Optional[int] = None)", "description": "Provides a simple sales forecast with weighted amount and counts based on open deals.", "scope": "AIService", "scopeKind": "class"}, {"name": "create_contact(payload: ContactCreate)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "delete_contact(contact_id: int)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "get_contact(contact_id: int)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "list_contacts(page: int = Query(1, ge=1), size: int = Query(20, ge=1, le=100))", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "update_contact(contact_id: int, payload: ContactUpdate)", "scope": "", "scopeKind": "", "description": "unavailable"}], "calls": ["db.get", "db.execute", "select", "func.sum", "func.percentile_cont", "datetime.date.today", "math.log10"], "search-terms": ["AIService", "lead scoring", "win probability", "sales forecast", "deal amount analysis", "pipeline stage probability"], "state": 2, "file_id": 18, "knowledge_revision": 67, "git_revision": "", "revision_history": [{"38": ""}, {"67": ""}], "ctags": [{"_type": "tag", "name": "AIService", "path": "/home/kavia/workspace/code-generation/kavia-ai-crm-platform-87080-87094/crm_backend/src/services/ai.py", "pattern": "/^class AIService:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "ai_service", "path": "/home/kavia/workspace/code-generation/kavia-ai-crm-platform-87080-87094/crm_backend/src/services/ai.py", "pattern": "/^ai_service = AIService()$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "create_contact", "path": "/home/kavia/workspace/code-generation/kavia-ai-crm-platform-87080-87094/crm_backend/src/services/ai.py", "pattern": "/^def create_contact(payload: ContactCreate):$/", "language": "Python", "kind": "function", "signature": "(payload: ContactCreate)"}, {"_type": "tag", "name": "delete_contact", "path": "/home/kavia/workspace/code-generation/kavia-ai-crm-platform-87080-87094/crm_backend/src/services/ai.py", "pattern": "/^def delete_contact(contact_id: int):$/", "language": "Python", "kind": "function", "signature": "(contact_id: int)"}, {"_type": "tag", "name": "forecast", "path": "/home/kavia/workspace/code-generation/kavia-ai-crm-platform-87080-87094/crm_backend/src/services/ai.py", "pattern": "/^    def forecast(self, db: Session, pipeline_id: Optional[int] = None) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, db: Session, pipeline_id: Optional[int] = None)", "scope": "AIService", "scopeKind": "class"}, {"_type": "tag", "name": "get_contact", "path": "/home/kavia/workspace/code-generation/kavia-ai-crm-platform-87080-87094/crm_backend/src/services/ai.py", "pattern": "/^def get_contact(contact_id: int):$/", "language": "Python", "kind": "function", "signature": "(contact_id: int)"}, {"_type": "tag", "name": "list_contacts", "path": "/home/kavia/workspace/code-generation/kavia-ai-crm-platform-87080-87094/crm_backend/src/services/ai.py", "pattern": "/^def list_contacts(page: int = Query(1, ge=1), size: int = Query(20, ge=1, le=100)):$/", "language": "Python", "kind": "function", "signature": "(page: int = Query(1, ge=1), size: int = Query(20, ge=1, le=100))"}, {"_type": "tag", "name": "router", "path": "/home/kavia/workspace/code-generation/kavia-ai-crm-platform-87080-87094/crm_backend/src/services/ai.py", "pattern": "/^router = APIRouter()$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "score_lead", "path": "/home/kavia/workspace/code-generation/kavia-ai-crm-platform-87080-87094/crm_backend/src/services/ai.py", "pattern": "/^    def score_lead(self, db: Session, contact_id: int) -> float:$/", "language": "Python", "typeref": "typename:float", "kind": "member", "signature": "(self, db: Session, contact_id: int)", "scope": "AIService", "scopeKind": "class"}, {"_type": "tag", "name": "update_contact", "path": "/home/kavia/workspace/code-generation/kavia-ai-crm-platform-87080-87094/crm_backend/src/services/ai.py", "pattern": "/^def update_contact(contact_id: int, payload: ContactUpdate):$/", "language": "Python", "kind": "function", "signature": "(contact_id: int, payload: ContactUpdate)"}, {"_type": "tag", "name": "win_probability", "path": "/home/kavia/workspace/code-generation/kavia-ai-crm-platform-87080-87094/crm_backend/src/services/ai.py", "pattern": "/^    def win_probability(self, db: Session, deal_id: int) -> float:$/", "language": "Python", "typeref": "typename:float", "kind": "member", "signature": "(self, db: Session, deal_id: int)", "scope": "AIService", "scopeKind": "class"}], "hash": "654a5fd483949f5b713a189e3c9cae51", "format-version": 4, "code-base-name": "crm_backend", "filename": "crm_backend/src/services/ai.py", "fields": [{"name": "ai_service = AIService()", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "router = APIRouter()", "scope": "", "scopeKind": "", "description": "unavailable"}]}