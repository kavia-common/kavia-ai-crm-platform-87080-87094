{"is_source_file": true, "format": "Python", "description": "This file implements an AIService class providing heuristic-based methods for scoring leads, estimating win probabilities, and forecasting deal outcomes within a CRM backend system. It interacts with SQLAlchemy ORM models and database sessions to perform data queries and computations relevant to sales pipelines.", "external_files": ["src/db/models.py"], "external_methods": ["sqlalchemy.orm.Session.get", "sqlalchemy.orm.Session.execute", "sqlalchemy.sql.select", "sqlalchemy.func"], "published": ["ai_service"], "classes": [{"name": "AIService", "description": "A class providing heuristic-based AI functionalities such as lead scoring, win probability estimation, and forecast calculations."}], "methods": [{"name": "float score_lead(self, db: Session, contact_id: int)", "description": "Calculates a heuristic score (0-100) for a lead based on contact attributes and associated deals.", "scope": "AIService", "scopeKind": "class"}, {"name": "float win_probability(self, db: Session, deal_id: int)", "description": "Estimates the probability of winning a deal based on deal stage, amount, and close date.", "scope": "AIService", "scopeKind": "class"}, {"name": "Dict[str,Any] forecast(self, db: Session, pipeline_id: Optional[int] = None)", "description": "Provides a forecast with weighted amounts and counts for open deals, optionally filtered by pipeline.", "scope": "AIService", "scopeKind": "class"}], "calls": ["db.get", "db.execute", "select", "func.sum", "func.percentile_cont", "Deal.amount", "Deal.status", "Deal.contact_id", "Deal.pipeline_id", "Deal.stage_id", "Deal.id", "Deal.close_date", "PipelineStage.id", "PipelineStage.probability", "PipelineStage.id"], "search-terms": ["AIService", "lead scoring", "win probability", "forecast", "pipeline", "deal", "contact", "heuristic"], "state": 2, "file_id": 18, "knowledge_revision": 71, "git_revision": "6815dba8f1d4ad73197c112b8e4cd61a780ffc60", "revision_history": [{"38": ""}, {"67": ""}, {"71": "6815dba8f1d4ad73197c112b8e4cd61a780ffc60"}], "ctags": [{"_type": "tag", "name": "AIService", "path": "/home/kavia/workspace/code-generation/kavia-ai-crm-platform-87080-87094/crm_backend/src/services/ai.py", "pattern": "/^class AIService:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "ai_service", "path": "/home/kavia/workspace/code-generation/kavia-ai-crm-platform-87080-87094/crm_backend/src/services/ai.py", "pattern": "/^ai_service = AIService()$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "forecast", "path": "/home/kavia/workspace/code-generation/kavia-ai-crm-platform-87080-87094/crm_backend/src/services/ai.py", "pattern": "/^    def forecast(self, db: Session, pipeline_id: Optional[int] = None) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, db: Session, pipeline_id: Optional[int] = None)", "scope": "AIService", "scopeKind": "class"}, {"_type": "tag", "name": "score_lead", "path": "/home/kavia/workspace/code-generation/kavia-ai-crm-platform-87080-87094/crm_backend/src/services/ai.py", "pattern": "/^    def score_lead(self, db: Session, contact_id: int) -> float:$/", "language": "Python", "typeref": "typename:float", "kind": "member", "signature": "(self, db: Session, contact_id: int)", "scope": "AIService", "scopeKind": "class"}, {"_type": "tag", "name": "win_probability", "path": "/home/kavia/workspace/code-generation/kavia-ai-crm-platform-87080-87094/crm_backend/src/services/ai.py", "pattern": "/^    def win_probability(self, db: Session, deal_id: int) -> float:$/", "language": "Python", "typeref": "typename:float", "kind": "member", "signature": "(self, db: Session, deal_id: int)", "scope": "AIService", "scopeKind": "class"}], "hash": "fd0a77ace5ad8c3c295cf94b004e71cb", "format-version": 4, "code-base-name": "crm_backend", "filename": "crm_backend/src/services/ai.py", "fields": [{"name": "ai_service = AIService()", "scope": "", "scopeKind": "", "description": "unavailable"}]}