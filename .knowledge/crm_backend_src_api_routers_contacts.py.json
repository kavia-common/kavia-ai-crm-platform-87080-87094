{"is_source_file": true, "format": "Python", "description": "This is a FastAPI router module for managing 'contacts' in a CRM backend. It defines REST API endpoints for listing, creating, retrieving, updating, patching, and deleting contact records, utilizing SQLAlchemy ORM for database interactions and Pydantic schemas for data validation and serialization.", "external_files": ["src.core.database", "src.models.crm_models", "src.schemas.crm"], "external_methods": ["get_db", "Contact", "ContactSchema", "ContactCreate", "ContactUpdate"], "published": ["list_contacts", "create_contact", "get_contact", "update_contact", "patch_contact", "delete_contact"], "classes": [{"name": "Contact", "description": "SQLAlchemy ORM model representing a contact."}, {"name": "ContactSchema", "description": "Pydantic schema for serializing contact data."}, {"name": "ContactCreate", "description": "Pydantic schema for creating a new contact."}, {"name": "ContactUpdate", "description": "Pydantic schema for updating a contact."}], "methods": [{"name": "Contact _get_or_404(db: Session, contact_id: int)", "description": "Fetches a Contact by ID or raises a 404 HTTPException if not found.", "scope": "", "scopeKind": ""}, {"name": "list_contacts( db: Session = Depends(get_db), account_id: Optional[int] = Query(default=None, description=\"Filter by account id\"), q: Optional[str] = Query(default=None, description=\"Search by name, email, or phone\"), owner_user_id: Optional[str] = Query(default=None, description=\"Filter by owner user id\"), is_active: Optional[bool] = Query(default=None, description=\"Filter by active status\"), limit: int = Query(default=50, ge=1, le=200), offset: int = Query(default=0, ge=0), )", "description": "Retrieves a list of contacts with optional filters, search, and pagination.", "scope": "", "scopeKind": ""}, {"name": "create_contact(payload: ContactCreate, db: Session = Depends(get_db))", "description": "Creates a new contact record.", "scope": "", "scopeKind": ""}, {"name": "get_contact(contact_id: int, db: Session = Depends(get_db))", "description": "Retrieves a contact by its ID.", "scope": "", "scopeKind": ""}, {"name": "update_contact(contact_id: int, payload: ContactCreate, db: Session = Depends(get_db))", "description": "Replaces all updatable fields of an existing contact.", "scope": "", "scopeKind": ""}, {"name": "patch_contact(contact_id: int, payload: ContactUpdate, db: Session = Depends(get_db))", "description": "Partially updates fields of an existing contact.", "scope": "", "scopeKind": ""}, {"name": "delete_contact(contact_id: int, db: Session = Depends(get_db))", "description": "Deletes a contact by ID.", "scope": "", "scopeKind": ""}], "calls": ["db.execute", "db.add", "db.commit", "db.refresh", "db.delete", "get_db", "select", "Contact", "ContactSchema", "ContactCreate", "ContactUpdate"], "search-terms": ["contacts", "API router", "FastAPI", "CRM", "SQLAlchemy", "database interactions", "contact CRUD", "filter by account_id", "search by name or email", "pagination", "REST API"], "state": 2, "file_id": 12, "knowledge_revision": 30, "git_revision": "", "ctags": [{"_type": "tag", "name": "ContactSchema", "path": "/home/kavia/workspace/code-generation/kavia-ai-crm-platform-87080-87094/crm_backend/src/api/routers/contacts.py", "pattern": "/^from src.schemas.crm import Contact as ContactSchema, ContactCreate, ContactUpdate$/", "language": "Python", "kind": "unknown", "nameref": "unknown:Contact"}, {"_type": "tag", "name": "_get_or_404", "path": "/home/kavia/workspace/code-generation/kavia-ai-crm-platform-87080-87094/crm_backend/src/api/routers/contacts.py", "pattern": "/^def _get_or_404(db: Session, contact_id: int) -> Contact:$/", "language": "Python", "typeref": "typename:Contact", "kind": "function", "signature": "(db: Session, contact_id: int)"}, {"_type": "tag", "name": "create_contact", "path": "/home/kavia/workspace/code-generation/kavia-ai-crm-platform-87080-87094/crm_backend/src/api/routers/contacts.py", "pattern": "/^def create_contact(payload: ContactCreate, db: Session = Depends(get_db)):$/", "language": "Python", "kind": "function", "signature": "(payload: ContactCreate, db: Session = Depends(get_db))"}, {"_type": "tag", "name": "delete_contact", "path": "/home/kavia/workspace/code-generation/kavia-ai-crm-platform-87080-87094/crm_backend/src/api/routers/contacts.py", "pattern": "/^def delete_contact(contact_id: int, db: Session = Depends(get_db)):$/", "language": "Python", "kind": "function", "signature": "(contact_id: int, db: Session = Depends(get_db))"}, {"_type": "tag", "name": "get_contact", "path": "/home/kavia/workspace/code-generation/kavia-ai-crm-platform-87080-87094/crm_backend/src/api/routers/contacts.py", "pattern": "/^def get_contact(contact_id: int, db: Session = Depends(get_db)):$/", "language": "Python", "kind": "function", "signature": "(contact_id: int, db: Session = Depends(get_db))"}, {"_type": "tag", "name": "list_contacts", "path": "/home/kavia/workspace/code-generation/kavia-ai-crm-platform-87080-87094/crm_backend/src/api/routers/contacts.py", "pattern": "/^def list_contacts($/", "language": "Python", "kind": "function", "signature": "( db: Session = Depends(get_db), account_id: Optional[int] = Query(default=None, description=\"Filter by account id\"), q: Optional[str] = Query(default=None, description=\"Search by name, email, or phone\"), owner_user_id: Optional[str] = Query(default=None, description=\"Filter by owner user id\"), is_active: Optional[bool] = Query(default=None, description=\"Filter by active status\"), limit: int = Query(default=50, ge=1, le=200), offset: int = Query(default=0, ge=0), )"}, {"_type": "tag", "name": "patch_contact", "path": "/home/kavia/workspace/code-generation/kavia-ai-crm-platform-87080-87094/crm_backend/src/api/routers/contacts.py", "pattern": "/^def patch_contact(contact_id: int, payload: ContactUpdate, db: Session = Depends(get_db)):$/", "language": "Python", "kind": "function", "signature": "(contact_id: int, payload: ContactUpdate, db: Session = Depends(get_db))"}, {"_type": "tag", "name": "router", "path": "/home/kavia/workspace/code-generation/kavia-ai-crm-platform-87080-87094/crm_backend/src/api/routers/contacts.py", "pattern": "/^router = APIRouter(prefix=\"\\/contacts\", tags=[\"contacts\"])$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "update_contact", "path": "/home/kavia/workspace/code-generation/kavia-ai-crm-platform-87080-87094/crm_backend/src/api/routers/contacts.py", "pattern": "/^def update_contact(contact_id: int, payload: ContactCreate, db: Session = Depends(get_db)):$/", "language": "Python", "kind": "function", "signature": "(contact_id: int, payload: ContactCreate, db: Session = Depends(get_db))"}], "hash": "7bf9669c5a63bfb12284e6a5ab5f310f", "format-version": 4, "code-base-name": "crm_backend", "filename": "crm_backend/src/api/routers/contacts.py", "fields": [{"name": "router = APIRouter(prefix=\"\\/contacts\", tags=[\"contacts\"])", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"30": ""}]}