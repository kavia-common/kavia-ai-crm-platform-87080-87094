{"is_source_file": true, "format": "Python", "description": "This file defines a generic CRUD (Create, Read, Update, Delete) service class for database operations using SQLAlchemy ORM. It provides methods to get, list, create, update, and delete database models in a standardized way.", "external_files": ["sqlalchemy.orm import Session", "sqlalchemy import select"], "external_methods": ["db.get", "db.execute", "db.add", "db.commit", "db.refresh", "db.delete"], "published": ["CRUDService"], "classes": [{"name": "CRUDService", "description": "A generic class for performing CRUD operations on a database model, parametrized by model, create schema, and update schema types."}], "methods": [{"name": "__init__(self, model: Type[ModelType])", "description": "Initializes the CRUDService with a specific database model type.", "scope": "CRUDService", "scopeKind": "class"}, {"name": "Optional[ModelType] get(self, db: Session, id: Any)", "description": "Retrieves a single record by primary key from the database.", "scope": "CRUDService", "scopeKind": "class"}, {"name": "List[ModelType] list(self, db: Session, skip: int = 0, limit: int = 100)", "description": "Retrieves a list of records, with optional pagination via skip and limit.", "scope": "CRUDService", "scopeKind": "class"}, {"name": "ModelType create(self, db: Session, obj_in: CreateSchemaType)", "description": "Creates a new database record from the input schema, dumping data from the schema and inserting into the database.", "scope": "CRUDService", "scopeKind": "class"}, {"name": "ModelType update(self, db: Session, db_obj: ModelType, obj_in: UpdateSchemaType)", "description": "Updates an existing database record with data from the input schema, excluding unset fields.", "scope": "CRUDService", "scopeKind": "class"}, {"name": "None delete(self, db: Session, db_obj: ModelType)", "description": "Deletes a database record.", "scope": "CRUDService", "scopeKind": "class"}], "calls": ["db.get", "select", "db.execute", "db.add", "db.commit", "db.refresh", "db.delete"], "search-terms": ["CRUD", "generic service", "SQLAlchemy", "database operations", "model_dump", "TypeVar", "Type", "Optional", "List"], "state": 2, "file_id": 13, "knowledge_revision": 62, "git_revision": "", "revision_history": [{"30": ""}, {"62": ""}], "ctags": [{"_type": "tag", "name": "CRUDService", "path": "/home/kavia/workspace/code-generation/kavia-ai-crm-platform-87080-87094/crm_backend/src/services/common.py", "pattern": "/^class CRUDService(Generic[ModelType, CreateSchemaType, UpdateSchemaType]):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "CreateSchemaType", "path": "/home/kavia/workspace/code-generation/kavia-ai-crm-platform-87080-87094/crm_backend/src/services/common.py", "pattern": "/^CreateSchemaType = TypeVar(\"CreateSchemaType\")$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "ModelType", "path": "/home/kavia/workspace/code-generation/kavia-ai-crm-platform-87080-87094/crm_backend/src/services/common.py", "pattern": "/^ModelType = TypeVar(\"ModelType\")$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "UpdateSchemaType", "path": "/home/kavia/workspace/code-generation/kavia-ai-crm-platform-87080-87094/crm_backend/src/services/common.py", "pattern": "/^UpdateSchemaType = TypeVar(\"UpdateSchemaType\")$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/code-generation/kavia-ai-crm-platform-87080-87094/crm_backend/src/services/common.py", "pattern": "/^    def __init__(self, model: Type[ModelType]):$/", "language": "Python", "kind": "member", "signature": "(self, model: Type[ModelType])", "scope": "CRUDService", "scopeKind": "class"}, {"_type": "tag", "name": "create", "path": "/home/kavia/workspace/code-generation/kavia-ai-crm-platform-87080-87094/crm_backend/src/services/common.py", "pattern": "/^    def create(self, db: Session, obj_in: CreateSchemaType) -> ModelType:$/", "language": "Python", "typeref": "typename:ModelType", "kind": "member", "signature": "(self, db: Session, obj_in: CreateSchemaType)", "scope": "CRUDService", "scopeKind": "class"}, {"_type": "tag", "name": "delete", "path": "/home/kavia/workspace/code-generation/kavia-ai-crm-platform-87080-87094/crm_backend/src/services/common.py", "pattern": "/^    def delete(self, db: Session, db_obj: ModelType) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "(self, db: Session, db_obj: ModelType)", "scope": "CRUDService", "scopeKind": "class"}, {"_type": "tag", "name": "get", "path": "/home/kavia/workspace/code-generation/kavia-ai-crm-platform-87080-87094/crm_backend/src/services/common.py", "pattern": "/^    def get(self, db: Session, id: Any) -> Optional[ModelType]:$/", "language": "Python", "typeref": "typename:Optional[ModelType]", "kind": "member", "signature": "(self, db: Session, id: Any)", "scope": "CRUDService", "scopeKind": "class"}, {"_type": "tag", "name": "list", "path": "/home/kavia/workspace/code-generation/kavia-ai-crm-platform-87080-87094/crm_backend/src/services/common.py", "pattern": "/^    def list(self, db: Session, skip: int = 0, limit: int = 100) -> List[ModelType]:$/", "language": "Python", "typeref": "typename:List[ModelType]", "kind": "member", "signature": "(self, db: Session, skip: int = 0, limit: int = 100)", "scope": "CRUDService", "scopeKind": "class"}, {"_type": "tag", "name": "update", "path": "/home/kavia/workspace/code-generation/kavia-ai-crm-platform-87080-87094/crm_backend/src/services/common.py", "pattern": "/^    def update(self, db: Session, db_obj: ModelType, obj_in: UpdateSchemaType) -> ModelType:$/", "language": "Python", "typeref": "typename:ModelType", "kind": "member", "signature": "(self, db: Session, db_obj: ModelType, obj_in: UpdateSchemaType)", "scope": "CRUDService", "scopeKind": "class"}], "hash": "2cb893a2eac8e5832e2013be4dfd675a", "format-version": 4, "code-base-name": "crm_backend", "filename": "crm_backend/src/services/common.py", "fields": [{"name": "CreateSchemaType = TypeVar(\"CreateSchemaType\")", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "ModelType = TypeVar(\"ModelType\")", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "UpdateSchemaType = TypeVar(\"UpdateSchemaType\")", "scope": "", "scopeKind": "", "description": "unavailable"}]}