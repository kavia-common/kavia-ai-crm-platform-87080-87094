{"is_source_file": true, "format": "Python (FastAPI)", "description": "This file defines API routes for AI-related functionalities within a CRM backend. It includes endpoints for lead scoring, revenue forecasting, and win probability estimation based on deals and activities data.", "external_files": ["src.core.database", "src.models.crm_models"], "external_methods": ["get_db", "select", "func", "Session"], "published": ["lead_scoring", "forecast", "win_probability"], "classes": [], "methods": [{"name": "List[Dict] lead_scoring( db: Session = Depends(get_db), account_id: Optional[int] = Query(default=None, description=\"Filter deals by account id\"), top_n: int = Query(default=20, ge=1, le=200, description=\"Number of top leads to return\"), )", "description": "Calculates heuristic lead scores based on recent activities and deal amounts.", "scope": "", "scopeKind": ""}, {"name": "Dict forecast( db: Session = Depends(get_db), account_id: Optional[int] = Query(default=None, description=\"Filter by account id\"), )", "description": "Provides a naive forecast of expected revenue based on open deals.", "scope": "", "scopeKind": ""}, {"name": "Dict win_probability(deal_id: int, db: Session = Depends(get_db))", "description": "Estimates a deal's probability of winning based on amount and activity volume.", "scope": "", "scopeKind": ""}], "calls": ["src.core.database.get_db", "sqlalchemy.select", "sqlalchemy.func.count", "sqlalchemy.orm.Session.execute", "sqlalchemy.orm.Session.get"], "search-terms": ["ai", "lead-scoring", "forecast", "win-probability", "deals", "activity logs", "heuristic scoring", "revenue forecast", "deal probability", "crm", "fastapi apirouter"], "state": 2, "file_id": 16, "knowledge_revision": 38, "git_revision": "", "ctags": [{"_type": "tag", "name": "forecast", "path": "/home/kavia/workspace/code-generation/kavia-ai-crm-platform-87080-87094/crm_backend/src/api/routers/ai.py", "pattern": "/^def forecast($/", "language": "Python", "typeref": "typename:Dict", "kind": "function", "signature": "( db: Session = Depends(get_db), account_id: Optional[int] = Query(default=None, description=\"Filter by account id\"), )"}, {"_type": "tag", "name": "lead_scoring", "path": "/home/kavia/workspace/code-generation/kavia-ai-crm-platform-87080-87094/crm_backend/src/api/routers/ai.py", "pattern": "/^def lead_scoring($/", "language": "Python", "typeref": "typename:List[Dict]", "kind": "function", "signature": "( db: Session = Depends(get_db), account_id: Optional[int] = Query(default=None, description=\"Filter deals by account id\"), top_n: int = Query(default=20, ge=1, le=200, description=\"Number of top leads to return\"), )"}, {"_type": "tag", "name": "router", "path": "/home/kavia/workspace/code-generation/kavia-ai-crm-platform-87080-87094/crm_backend/src/api/routers/ai.py", "pattern": "/^router = APIRouter(prefix=\"\\/ai\", tags=[\"ai\"])$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "win_probability", "path": "/home/kavia/workspace/code-generation/kavia-ai-crm-platform-87080-87094/crm_backend/src/api/routers/ai.py", "pattern": "/^def win_probability(deal_id: int, db: Session = Depends(get_db)) -> Dict:$/", "language": "Python", "typeref": "typename:Dict", "kind": "function", "signature": "(deal_id: int, db: Session = Depends(get_db))"}], "hash": "08219662c87deb8e1b70612196172288", "format-version": 4, "code-base-name": "crm_backend", "filename": "crm_backend/src/api/routers/ai.py", "fields": [{"name": "router = APIRouter(prefix=\"\\/ai\", tags=[\"ai\"])", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"38": ""}]}